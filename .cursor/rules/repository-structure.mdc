---
description: "Product Wizard repository structure and development guidelines"
globs: ["**/*"]
alwaysApply: true
---

# Product Wizard - Repository Structure & Development Guidelines

## Repository Overview

This repository serves three main purposes:
1. **Custom RAG Pipeline** - Hybrid approach combining Responses API (retrieval) + Chat Completions API (generation) with automatic validation
2. **Heroku Slack Middleware** - App connecting assistant to Slack  
3. **Development Tools** - Testing, optimization, and deployment utilities

## File Structure Guidelines

### Knowledge Base Management
- **Source Files**: Edit Markdown files in `knowledge_base/database/`
- **Vector Store Files**: Always update corresponding TXT files in `knowledge_base/database_txt/` when modifying Markdown
- **Synchronization Rule**: Every `.md` file must have a corresponding `.txt` file with identical content

### Prompt Management
- **Current Version**: `assistant_config/MASTER_PROMPT.md` (production prompt - the only version)
- **Versioning**: Git handles all version control - no manual prompt versioning needed
- **Update Process**: Edit `MASTER_PROMPT.md` directly, commit changes, and deploy
- **No Backup Files**: Git history is the single source of truth for versioning

### Application Structure
- **Production App**: `src/app_custom_rag.py` (Custom RAG Pipeline with automatic validation - PRODUCTION)
- **Fallback App**: `src/app_response.py` (Responses API Slack middleware - fallback)
- **Configuration**: Root level files (`Procfile`, `requirements.txt`, `runtime.txt`)
- **Environment**: Use `.env` file for local development (never commit)
- **Required Env Vars**: `OPENAI_VECTOR_STORE_ID`, `OPENAI_API_KEY`, `SLACK_BOT_TOKEN`, `SLACK_SIGNING_SECRET`

### Testing & Tools
- **Production Testing**: Test actual `CustomRAGPipeline` from `src/app_custom_rag.py`
- **Judge-Based Evaluation**: All tests include GPT-4o evaluation with structured feedback
- **Core Tests**: `regression_test.py`, `custom_rag_pipeline_tester.py`, `conversation_context_tester.py`
- **Test Preservation**: Keep all test files (`test_*.py`) - never delete, they may be useful
- **Test Results**: Automatically saved to `tests/results/` with timestamps and judge scores
- **Production Deployment**: Custom RAG Pipeline reads directly from `assistant_config/MASTER_PROMPT.md` via Heroku app deployment
- **Utilities**: Additional tools in `tools/` directory

## Development Rules

### File Editing Rules
1. **Never edit TXT files directly** - always edit the corresponding Markdown file first
2. **Always update both formats** when modifying course information
3. **Test locally before deployment** using comprehensive test suite
4. **Test production code** - import and test actual `CustomRAGPipeline` from `app_custom_rag.py`
5. **Never delete test files** - preserve all `test_*.py` files for future reference
6. **Include judge evaluation** - all tests should use GPT-4o for objective assessment

### Code Quality
- **No API keys in code** - use environment variables
- **Follow naming conventions** for test files: `test_*.py`
- **Save test results** to `tests/results/` with descriptive names
- **Document changes** in commit messages

### Deployment Process

#### Production Deployment (Custom RAG Pipeline):
1. Edit source files (Markdown in `knowledge_base/database/` and/or `src/app_custom_rag.py`)
2. Update corresponding TXT files (`knowledge_base/database_txt/`) when needed
3. Update `assistant_config/MASTER_PROMPT.md` if needed
4. Test changes locally with comprehensive test suite (`tests/regression_test.py`, etc.)
5. **Commit and push to GitHub**
6. **Deploy Heroku app** (Custom RAG Pipeline reads from repository)
7. Verify in production environment via Slack and health endpoint

## Key Files & Their Roles

### Critical Configuration
- `src/app_custom_rag.py` - Custom RAG Pipeline application (PRODUCTION)
- `assistant_config/MASTER_PROMPT.md` - Current production assistant prompt (Git versioned)
- `index.yaml` - Course structure for third-party apps (root level)
- `src/app_response.py` - Responses API Slack middleware (fallback)

### Knowledge Base
- `knowledge_base/database/*.md` - Source course information (edit these)
- `knowledge_base/database_txt/*.txt` - Vector store format (auto-sync with MD)

### Development
- `tests/regression_test.py` - Comprehensive test suite with judge evaluation
- `tests/custom_rag_pipeline_tester.py` - Direct testing of production pipeline
- `tests/conversation_context_tester.py` - Context management testing
- `tests/results/` - Test results with timestamps and judge scores
- `tools/` - Utility scripts for development and maintenance

## Forbidden Actions
- ❌ Never commit API keys or sensitive credentials
- ❌ Never edit TXT files without updating corresponding MD files
- ❌ Never deploy without running comprehensive test suite first
- ❌ Never test simulated code - always test actual production `CustomRAGPipeline`
- ❌ Never modify the three-component repository structure
- ❌ Never perform Git operations unless explicitly requested by user

## Context for AI Assistance

This is a production system serving Ironhack's sales team. Any changes must:
- Maintain zero fabrication policy with automatic validation
- Preserve citation quality and source attribution
- Ensure sales-appropriate responses with conversational tone
- Test actual production `CustomRAGPipeline` code, not simulations
- Include judge-based evaluation for objective quality assessment
- Keep all three components (knowledge base, Custom RAG Pipeline, tools) functioning

Always prioritize data integrity and system reliability over feature additions.