---
description: "Product Wizard repository structure and development guidelines"
globs: ["**/*"]
alwaysApply: true
---

# Product Wizard - Repository Structure & Development Guidelines

## Repository Overview

This repository serves three main purposes:
1. **OpenAI Responses API Knowledge Base** - Course information vector store with Responses API
2. **Heroku Slack Middleware** - App connecting assistant to Slack  
3. **Development Tools** - Testing, optimization, and deployment utilities

## File Structure Guidelines

### Knowledge Base Management
- **Source Files**: Edit Markdown files in `knowledge_base/database/`
- **Vector Store Files**: Always update corresponding TXT files in `knowledge_base/database_txt/` when modifying Markdown
- **Synchronization Rule**: Every `.md` file must have a corresponding `.txt` file with identical content

### Prompt Management
- **Current Version**: `assistant_config/MASTER_PROMPT.md` (production prompt, NO VERSION HEADER)
- **Version History**: `docs/development/MASTER_PROMPT_V*.md` (versioned backups with headers)
- **Versioning Rule**: Version number goes in FILENAME only, not in file content
- **Update Process**: When changing master prompt, backup current as new version in `docs/development/`
- **Header Policy**: Current prompt has NO version header - only archived versions do

### Application Structure
- **Heroku App**: `src/app_response.py` (Responses API Slack middleware - production)
- **Legacy App**: `src/app_assistants.py` (Assistants API version - backup)
- **Configuration**: Root level files (`Procfile`, `requirements.txt`, `runtime.txt`)
- **Environment**: Use `.env` file for local development (never commit)
- **Required Env Vars**: `OPENAI_VECTOR_STORE_ID` (Responses API), `OPENAI_ASSISTANT_ID` (legacy backup)

### Testing & Tools
- **Local Testing**: Use scripts in `tests/` for prompt optimization
- **Test Preservation**: Keep all test files (`test_*.py`) - never delete, they may be useful
- **Test Results**: Automatically saved to `tests/results/` with timestamps
- **Legacy Deployment**: `tools/deploy_prompt.py` (ASSISTANTS API ONLY - not used in production)
- **Production Deployment**: Responses API reads directly from `assistant_config/MASTER_PROMPT.md` via Heroku app deployment
- **Utilities**: Additional tools in `tools/` directory

## Development Rules

### File Editing Rules
1. **Never edit TXT files directly** - always edit the corresponding Markdown file first
2. **Always update both formats** when modifying course information
3. **Test locally before deployment** using scripts in `tests/`
4. **Create version backups** when updating prompts
5. **Never delete test files** - preserve all `test_*.py` files for future reference
6. **Remove version headers** from current prompt - only archived versions have headers

### Code Quality
- **No API keys in code** - use environment variables
- **Follow naming conventions** for test files: `test_*.py`
- **Save test results** to `tests/results/` with descriptive names
- **Document changes** in commit messages

### Deployment Process

#### Production Deployment (Responses API):
1. Edit source files (Markdown in `knowledge_base/database/`)
2. Update corresponding TXT files (`knowledge_base/database_txt/`)
3. Update `assistant_config/MASTER_PROMPT.md` if needed
4. Test changes locally (`tests/test_*.py`)
5. **Commit and push to GitHub**
6. **Deploy Heroku app** (reads prompt from repository)
7. Verify in production environment

#### Legacy Deployment (Assistants API - DEPRECATED):
- Use `tools/deploy_prompt.py` for legacy assistant updates only
- Not used for production Slack app

## Key Files & Their Roles

### Critical Configuration
- `assistant_config/MASTER_PROMPT.md` - Current production assistant prompt
- `index.yaml` - Course structure for third-party apps (root level)
- `src/app_response.py` - Responses API Slack middleware (production)
- `src/app_assistants.py` - Legacy Assistants API version (backup)

### Knowledge Base
- `knowledge_base/database/*.md` - Source course information (edit these)
- `knowledge_base/database_txt/*.txt` - Vector store format (auto-sync with MD)

### Development
- `docs/development/MASTER_PROMPT_V*.md` - Prompt version history
- `docs/reports/*.md` - Test results and analysis reports
- `tests/` - Local testing and optimization scripts
- `tools/` - Deployment and maintenance utilities

## Forbidden Actions
- ❌ Never commit API keys or sensitive credentials
- ❌ Never edit TXT files without updating corresponding MD files
- ❌ Never deploy without running local tests first
- ❌ Never delete version history in `docs/development/`
- ❌ Never modify the three-component repository structure

## Context for AI Assistance

This is a production system serving Ironhack's sales team. Any changes must:
- Maintain zero fabrication policy
- Preserve citation quality
- Ensure sales-appropriate responses
- Keep all three components (knowledge base, middleware, tools) functioning

Always prioritize data integrity and system reliability over feature additions.